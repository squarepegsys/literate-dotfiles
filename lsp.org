#+TITLE: LSP Configuration
#+AUTHOR: Mike Hostetler
#+PROPERTY:   header-args+ :comments both

#+PROPERTY:   header-args+ :mkdirp yes
#+PROPERTY:   header-args+ :tangle "~/.emacs.d/personal/lsp.el"
#+bind: org-html-htmlize-output-type csspuA
#+OPTIONS: toc:2
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* LSP Config

For python, need to install ~pip install "python-language-server[all]"~
For JS -- ~npm i -g typescript-language-server; npm i -g typescript~
For Java .... it's complicated

#+begin_src elisp


(use-package lsp-mode
  :hook (python-mode . lsp)
  :hook (javascript-mode . lsp)
  :hook (java-mode . lsp)
  ;:hook (groovy-mode .lsp)
  :commands lsp)

;; optionally
(use-package lsp-ui
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c u" . lsp-ui-imenu))
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  )

(use-package company-lsp
   :commands company-lsp
   :config
   (push 'company-lsp company-backends)
   :custom
   (company-lsp-enable-snippet t)
   (company-lsp-cache-candidates t)
)

;; ok, not LSP-related but certainly company related

(use-package company-quickhelp
  :ensure t
  :after (company)
  :config
  (company-quickhelp-mode))

(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)


(setq lsp-python-executable-cmd (expand-file-name "~/.pyenv/shims/python"))

(company-mode)

(defun complete-or-indent ()
  (interactive)
  (if (company-manual-begin)
      (company-complete-common)
    (indent-according-to-mode)))



(autoload 'helm-company "helm-company") ;; Not necessary if using ELPA package
(eval-after-load 'company
  '(progn
     ;(define-key company-mode-map (kbd "C-;") 'helm-company)
     (define-key company-active-map (kbd "C-;") 'helm-company)))

(use-package lsp-java
  :init
  (defun jmi/java-mode-config ()

    (setq-local tab-width 4
                c-basic-offset 4)
    (toggle-truncate-lines 1)
    (setq-local tab-width 4)
    (setq-local c-basic-offset 4)
    (lsp))

 :demand t
  :after (lsp lsp-mode )) ; dap-mode jmi-init-platform-paths))

#+end_src
#+RESULTS:

* Groovy

Didn't have good luck with lsp-groovy (seemed.... weird) so I'm trying https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes

#+begin_src elisp
(use-package grails-mode)
(use-package groovy-mode)

#+end_src

#+RESULTS:

* Other file stuff

** Linting
*** lint our json

#+begin_src elisp
(add-hook 'json-mode-hook 'flymake-json-load)
#+end_src

#+RESULTS:
| flymake-json-load |

*** Lint our yaml

#+begin_src elisp
(use-package flycheck-yamllint
  :ensure t
  :defer t
  :init
  (progn
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))
#+end_src
** Web stuff

*** web-mode and emmet
Shamelessly stolen from https://github.com/sethmdoty/emacs.d/blob/master/emacs.org#web

#+begin_src elisp
(use-package web-mode
  :ensure t
  :mode (("\\.phtml\\'" . web-mode)
   ("\\.tpl\\.php\\'" . web-mode)
   ("\\.blade\\.php\\'" . web-mode)
   ("\\.jsp\\'" . web-mode)
   ("\\.as[cp]x\\'" . web-mode)
   ("\\.erb\\'" . web-mode)
   ("\\.html?\\'" . web-mode)
   ("\\.ejs\\'" . web-mode)
   ("\\.php\\'" . web-mode)
   ("\\.mustache\\'" . web-mode)
   ("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode))
  :init
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-attr-value-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-comment-keywords t)
  (setq web-mode-enable-current-element-highlight t))

(use-package company-web
  :ensure t
  :hook (web-mode . (lambda ()
    (add-to-list 'company-backends 'company-web-html)
    (add-to-list 'company-backends 'company-web-jade)
    (add-to-list 'company-backends 'company-web-slim))))

(use-package emmet-mode
  :ensure t
  :hook (web-mode sgml-mode html-mode css-mode))

(use-package rainbow-mode
  :ensure t
  :pin gnu
  :hook css-mode)

(use-package simple-httpd
  :ensure t)

(use-package impatient-mode
  :ensure t)
#+end_src

*** smart-tabs

maybe it should be somewhere else, but I really got it for emment (see above)

from https://emacs.stackexchange.com/a/10674/881

#+begin_src elisp

(use-package smart-tab
   :ensure 1
  :config (
  global-smart-tab-mode 1
)
)


(defun add-emmet-expand-to-smart-tab-completions ()
  ;; Add an entry for current major mode in
  ;; `smart-tab-completion-functions-alist' to use
  ;; `emmet-expand-line'.
  (add-to-list 'smart-tab-completion-functions-alist
               (cons major-mode #'emmet-expand-line)))

(add-hook 'web-mode-hook 'add-emmet-expand-to-smart-tab-completions)
(add-hook 'web-mode-hook 'add-emmet-expand-to-smart-tab-completions)

#+end_src


#+RESULTS:
| add-emmet-expand-to-smart-tab-completions | er/add-web-mode-expansions | emmet-mode | (lambda nil (add-to-list (quote company-backends) (quote company-web-html)) (add-to-list (quote company-backends) (quote company-web-jade)) (add-to-list (quote company-backends) (quote company-web-slim))) |
** ejc-sql
 #+begin_src elisp
(use-package ejc-sql
  :ensure t
  :config (add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (auto-complete-mode t)
            (ejc-ac-setup)))

)

 #+end_src

 #+RESULTS:
 : t
